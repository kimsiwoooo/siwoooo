import numpy as np
import torch
import dgl
import pandas as pd
from rdkit import Chem
from rdkit.Chem import AllChem
from tdc.single_pred import Tox
data = Tox(name = 'hERG')
split = data.get_split(method='random', seed=999, frac=[0.7, 0.1, 0.2])
train_set = split['train']
valid_set = split['valid']
test_set = split['test']
#print(train_set)
smi_train = list(train_set['Drug'])
label_train = list(train_set['Y'])
# print(smi_train[0])

mol = Chem.MolFromSmiles(smi_train[0])
print(mol)
atom_list = mol.GetAtoms()
num_atoms = len(atom_list)

bond_list = mol.GetBonds()
num_bonds = len(bond_list)
bond_ = bond_list[0]
bond_.GetBondType()

ATOM_VOCAB = [
    'C', 'N', 'O', 'S', 'F',
    'H', 'Si', 'P', 'Cl', 'Br',
    'Li', 'Na', 'K', 'Mg', 'Ca',
    'Fe', 'As', 'Al', 'I', 'B',
    'V', 'Tl', 'Sb', 'Sn', 'Ag',
    'Pd', 'Co', 'Se', 'Ti', 'Zn',
    'Ge', 'Cu', 'Au', 'Ni', 'Cd',
    'Mn', 'Cr', 'Pt', 'Hg', 'Pb',
]

def one_of_k_encoding(x, vocab):
    if x not in vocab:
        x = vocab[-1]
    return list(map(lambda s: float(x==s), vocab))

def get_atom_feature(atom):
    atom_feature = one_of_k_encoding(atom.GetSymbol(), ATOM_VOCAB)
    atom_feature += one_of_k_encoding(atom.GetDegree(), [0, 1, 2, 3, 4, 5])
    atom_feature += one_of_k_encoding(atom.GetTotalNumHs(), [0, 1, 2, 3, 4])
    atom_feature += one_of_k_encoding(atom.GetImplicitValence(), [0, 1, 2, 3, 4, 5])
    atom_feature += [atom.GetIsAromatic()]
    return atom_feature

def get_bond_feature(bond):
    bt = bond.GetBondType()
    bond_feature = [
        bt == Chem.rdchem.BondType.SINGLE,
        bt == Chem.rdchem.BondType.DOUBLE,
        bt == Chem.rdchem.BondType.TRIPLE,
        bt == Chem.rdchem.BondType.AROMATIC,
        bond.GetIsConjugated(),
        bond.IsInRing()
    ]
    return bond_feature


def get_molecular_graph(smi):
    mol = Chem.MolFromSmiles(smi)
    graph = dgl.DGLGraph()

    atom_list = mol.GetAtoms()
    num_atoms = len(atom_list)
    graph.add_nodes(num_atoms)

    atom_feature_list = [get_atom_feature(atom) for atom in atom_list]
    atom_feature_list = torch.tensor(atom_feature_list, dtype=torch.float64)
    graph.ndata['h'] = atom_feature_list

    bond_list = mol.GetBonds()
    bond_feature_list = []
    for bond in bond_list:
        bond_feature = get_bond_feature(bond)

        src = bond.GetBeginAtom().GetIdx()
        dst = bond.GetEndAtom().GetIdx()

        # DGL graph is undirectional
        # Thus, we have to add edge pair of both (i,j) and (j, i)
        # i --> j
        graph.add_edges(src, dst)
        bond_feature_list.append(bond_feature)

        # j --> i
        graph.add_edges(dst, src)
        bond_feature_list.append(bond_feature)

    bond_feature_list = torch.tensor(bond_feature_list, dtype=torch.float64)
    graph.edata['e_ij'] = bond_feature_list
    return graph

smi_ = smi_train[-1]
g_ = get_molecular_graph(smi_)
print(g_)
#print(g_.edata['e_ij'].shape)

import torch.nn as nn
import torch.nn.functional as F

import dgl.function as fn
from dgl.nn.functional import edge_softmax

h0 = g_.ndata['h'].float()
embedding_node = nn.Linear(58, 64, bias=False)
embedding_edge = nn.Linear(6, 64, bias=False)
h0 = embedding_node(h0)
g_.ndata['h'] = h0
print(h0.shape)
e_ij = embedding_edge(g_.edata['e_ij'].float())
g_.edata['e_ij'] = e_ij
print(e_ij.shape)

g_.update_all(fn.copy_u('h', 'm'), fn.sum('m', 'u_'))
u_ = g_.ndata['u_']

linear_ = nn.Linear(64, 64, bias=False)
norm_ = nn.LayerNorm(64)
act_ = F.relu
prob_ = 0.2
h_ = linear_(u_)
h_ = act_(h_) + h0
h_ = norm_(h_)
h_ = F.dropout(h_, p=prob_, training=False)
g_.ndata['h'] = h_
print(len(h_))
